{
  "unversionedId": "videos/ts/typescript-oop-polymorphism/typescript-oop-polymorphism",
  "id": "videos/ts/typescript-oop-polymorphism/typescript-oop-polymorphism",
  "isDocsHomePage": false,
  "title": "TypeScript：面向对象特性之多态",
  "description": "多态，是说一种物质，有多种状态，在很多生活场景中都能遇到这种现象。当组装电脑的时候，我们知道主板上有 CPU、显卡接口，对于显卡来说，只要接口型号匹配，那么不管它的厂家是谁、性能如何，它都能正常的发挥作用。在编程世界里，多态表现为，在创建对象的时候，不需要知道它具体是由哪个 class 创建的，但是通过继承或接口，我明确知道它包含一些方法和属性，这样我能安全的调用它们。接下来，分别看一下，在 typescript 中使用继承方式和接口方式实现多态。",
  "source": "@site/docs/videos/ts/05-typescript-oop-polymorphism/index.md",
  "sourceDirName": "videos/ts/05-typescript-oop-polymorphism",
  "slug": "/videos/ts/typescript-oop-polymorphism",
  "permalink": "/docs/videos/ts/typescript-oop-polymorphism",
  "editUrl": "https://github.com/zxuqian/zxuqian.cn/tree/master/docs/videos/ts/05-typescript-oop-polymorphism/index.md",
  "version": "current",
  "lastUpdatedAt": 1539502055,
  "formattedLastUpdatedAt": "2018/10/14",
  "frontMatter": {
    "id": "typescript-oop-polymorphism",
    "title": "TypeScript：面向对象特性之多态",
    "slug": "../typescript-oop-polymorphism",
    "description": "多态，是说一种物质，有多种状态，在很多生活场景中都能遇到这种现象。当组装电脑的时候，我们知道主板上有 CPU、显卡接口，对于显卡来说，只要接口型号匹配，那么不管它的厂家是谁、性能如何，它都能正常的发挥作用。在编程世界里，多态表现为，在创建对象的时候，不需要知道它具体是由哪个 class 创建的，但是通过继承或接口，我明确知道它包含一些方法和属性，这样我能安全的调用它们。接下来，分别看一下，在 typescript 中使用继承方式和接口方式实现多态。",
    "keywords": [
      "ts",
      "typescript",
      "polymorphism",
      "多态",
      "面向对象",
      "前端",
      "frontend"
    ]
  },
  "sidebar": "videos",
  "previous": {
    "title": "TypeScript：面向对象特性之继承",
    "permalink": "/docs/videos/ts/typescript-oop-inheritance"
  },
  "next": {
    "title": "Express.js 快速入门指南",
    "permalink": "/docs/videos/express/express-get-started"
  }
}