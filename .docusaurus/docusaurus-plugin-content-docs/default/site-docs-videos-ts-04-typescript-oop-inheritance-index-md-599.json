{
  "unversionedId": "videos/ts/typescript-oop-inheritance/typescript-oop-inheritance",
  "id": "videos/ts/typescript-oop-inheritance/typescript-oop-inheritance",
  "isDocsHomePage": false,
  "title": "TypeScript：面向对象特性之继承",
  "description": "继承在日常生活中随处可见，比如，我们都继承自人，都有同样的身体结构，但是有不同的样貌和技能。再比如，汽车之间也有相同的结构，但是有不同的外形和品牌。在编程语言里，继承也是通过这样的机制，来获得通用的属性和方法，而继承出来的类可以通过覆盖它们来增加自己独特的属性和方法。",
  "source": "@site/docs/videos/ts/04-typescript-oop-inheritance/index.md",
  "sourceDirName": "videos/ts/04-typescript-oop-inheritance",
  "slug": "/videos/ts/typescript-oop-inheritance",
  "permalink": "/docs/videos/ts/typescript-oop-inheritance",
  "editUrl": "https://github.com/zxuqian/zxuqian.cn/tree/master/docs/videos/ts/04-typescript-oop-inheritance/index.md",
  "version": "current",
  "lastUpdatedAt": 1539502055,
  "formattedLastUpdatedAt": "2018/10/14",
  "frontMatter": {
    "id": "typescript-oop-inheritance",
    "title": "TypeScript：面向对象特性之继承",
    "slug": "../typescript-oop-inheritance",
    "description": "继承在日常生活中随处可见，比如，我们都继承自人，都有同样的身体结构，但是有不同的样貌和技能。再比如，汽车之间也有相同的结构，但是有不同的外形和品牌。在编程语言里，继承也是通过这样的机制，来获得通用的属性和方法，而继承出来的类可以通过覆盖它们来增加自己独特的属性和方法。",
    "keywords": [
      "ts",
      "面向对象",
      "typescript",
      "继承",
      "前端",
      "frontend"
    ]
  },
  "sidebar": "videos",
  "previous": {
    "title": "TypeScript：面向对象特性之封装与抽象",
    "permalink": "/docs/videos/ts/typescript-oop-abstraction"
  },
  "next": {
    "title": "TypeScript：面向对象特性之多态",
    "permalink": "/docs/videos/ts/typescript-oop-polymorphism"
  }
}